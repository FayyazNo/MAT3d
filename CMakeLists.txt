CMAKE_MINIMUM_REQUIRED(VERSION 3.1)
PROJECT(MATFFT3D)
#ENABLE_TESTING()

SET(DEFAULT ON CACHE INTERNAL "Default value for enabled-by-default options")

IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING
       "Choose the type of build, options are: None Debug Release RelWithDebInfo
MinSizeRel."
       FORCE )
ENDIF()

MACRO(opt OPTION HELP VALUE)
  OPTION(ENABLE_${OPTION} ${HELP} ${VALUE})
  SET(OPT_TEXI "${OPT_TEXI}\n@item ENABLE_${OPTION}\n${HELP} (default: ${VALUE})")
ENDMACRO(opt)

# set to $DEFAULT to use by DEFAULT
opt(MPI "Enable MPI support" OFF)
opt(TESTING "Enable testing" ON)

# set up version
SET(MATFFT3D_MAJOR_VERSION 0)
SET(MATFFT3D_MINOR_VERSION 5)
SET(MATFFT3D_PATCH_VERSION 0)
SET(MATFFT3D_EXTRA_VERSION "" CACHE STRING "Solver and Reconstructor")
SET(MATFFT3D_VERSION "${MATFFT3D_MAJOR_VERSION}.${MATFFT3D_MINOR_VERSION}")
SET(MATFFT3D_VERSION "${MATFFT3D_VERSION}.${MATFFT3D_PATCH_VERSION}${MATFFT3D_EXTRA_VERSION}")
SET(MATFFT3D_SHORT_LICENSE "Copyright (c) 2017, SIMSOFTS LLC Proprietary, All Rights Reserved")

# finding libraries
IF (ENABLE_MPI)
    FIND_PACKAGE(MPI)
    IF(MPI_CXX_COMPILER)
        SET(CMAKE_CXX_COMPILER ${MPI_CXX_COMPILER})
    ENDIF()
ENDIF (ENABLE_MPI)

FIND_LIBRARY(FFTW_LIB fftw3 HINTS /usr/lib /usr/lib/x86_64-linux-gnu)
FIND_LIBRARY(FFTW_OMP_LIB fftw3_omp HINTS /usr/lib /usr/lib/x86_64-linux-gnu)
FIND_FILE(FFTW_HDR fftw3.h HINTS /usr/include)
GET_FILENAME_COMPONENT(FFTW_INCPATH ${FFTW_HDR} PATH)
MESSAGE(STATUS "fftw3 include path ${FFTW_INCPATH}")

FIND_LIBRARY(PTHR_LIB pthread HINTS /usr/lib /usr/lib/x86_64-linux-gnu)
FIND_LIBRARY(X11_LIB X11 HINTS /usr/lib /usr/lib/x86_64-linux-gnu)

FIND_LIBRARY(OPT_LIB opt HINTS /usr/local/lib)
FIND_LIBRARY(NEWMAT_LIB newmat HINTS /usr/local/lib)

FIND_LIBRARY(NLOPT_LIB nlopt HINTS /usr/lib /usr/lib/x86_64-linux-gnu)
FIND_FILE(NLOPT_HDR nlopt.h HINTS /usr/include)
GET_FILENAME_COMPONENT(NLOPT_INCPATH ${NLOPT_HDR} PATH)
#FIND_LIBRARY(BLAS_LIB blas HINTS /usr/lib /usr/lib/x86_64-linux-gnu)

# add include files to path
INCLUDE_DIRECTORIES(include)
INCLUDE_DIRECTORIES(AFTER ${FFTW_INCPATH})


FIND_PACKAGE(VTK REQUIRED )
INCLUDE(${VTK_USE_FILE})

find_package(OpenMP)

    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")



# todo : implement find_package
FIND_LIBRARY(OPT_LIB opt HINTS /usr/local/lib)
FIND_LIBRARY(NEWMAT_LIB newmat HINTS /usr/local/lib)



# setting compile and link options
INCLUDE(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++14" COMPILER_SUPPORTS_CXX14)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
IF(COMPILER_SUPPORTS_CXX14)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -DHAVE_TIMES -DHAVE_STD -DHAVE_NAMESPACES ")
ELSEIF(COMPILER_SUPPORTS_CXX11)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -DHAVE_TIMES -DHAVE_STD -DHAVE_NAMESPACES ")
ELSEIF(COMPILER_SUPPORTS_CXX0X)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -DHAVE_TIMES -DHAVE_STD -DHAVE_NAMESPACES ")
ELSE()
    MESSAGE(STATUS "The compiler ${CMAKE_CXX_COMPILER} has
                    no modern C++ support. Please use a different
                    C++ compiler.")
ENDIF()
ADD_COMPILE_OPTIONS(-fPIC)
#SET(CMAKE_POSITION_INDEPENDENT_CODE ON)

# adding flags to debug
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG")
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Wall -O2 -lm -lpthread -lfftw3_omp")

# compiled objects output paths
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# rpath
SET(CMAKE_SKIP_BUILD_RPATH  FALSE)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/gmsh/lib")
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

# turning off warnings
#IF(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
#  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -w")
#ENDIF()

# link parameters
#SET(MATFFT3D_LNK ${FFTW_LIB} ${X11_LIBRARIES}  ${VTK_LIBRARIES} ${NLOPT_LIBRARIES} ${OPT_LIB} ${NEWMAT_LIB} )
SET(MATFFT3D_LNK ${FFTW_LIB} ${X11_LIB} ${PTHR_LIB} ${VTK_LIBRARIES} ${OPT_LIB} ${NEWMAT_LIB} ${BLAS_LIB} ${NLOPT_LIB} ${FFTW_OMP_LIB})
# setting up files
# install include files
FILE(GLOB H_FILES include/*.H)
FILE(GLOB h_FILES include/*.h)
FILE(GLOB hpp_FILES include/*.hpp)
SET(MATFFT3D_INC_FILES ${H_FILES} ${h_FILES} ${hpp_FILES})
INSTALL(FILES ${MATFFT3D_INC_FILES} DESTINATION MATFFT3D/include)

# setting compile and link flags
SET(
    MATFFT3D_SRCS
    src/2d/FFT_analysis2D.cpp
    src/3d/FFT_analysis3D.cpp
    src/rec/reconstruction.cpp
    src/3dTherm/FFT_thermal3D.cpp )

SET(MAT3D_SRCS   example/3d/main.cpp )
SET(MAT2D_SRCS   example/2d/main.cpp )
SET(REC3D_SRCS   example/reconst3d/main.cpp )
SET(THERM3D_SRCS example/3d_thermal/main.cpp )
#SET(PERCOLATION_SRCS example/percolation/main.cpp )
#SET(OPT_SRCS example/opt/main.cpp )
#SET(OMP_SRCS example/test/main.cpp )
#SET(JSON_SRCS example/json/main.cpp )

SET(ALL_SRCS ${MATFFT3D_SRCS} ${MAT3D_SRCS} ${MAT2D_SRCS} ${REC3D_SRCS} ${THERM3D_SRCS}  
    PROPERTIES COMPILE_FLAGS "-fPIC ${MPI_CXX_COMPILE_FLAGS}")

# builiding libraries
# build matfft3d lib
IF(NOT BUILD_STATIC)
    ADD_LIBRARY(MatFFT3D SHARED ${MATFFT3D_SRCS})
ELSE()
    ADD_LIBRARY(MatFFT3D ${MATFFT3D_SRCS})
    ADD_DEFINITIONS( -DSTATIC_LINK )
ENDIF()
TARGET_LINK_LIBRARIES(MatFFT3D ${MATFFT3D_LNK})
INSTALL(TARGETS MatFFT3D LIBRARY DESTINATION Matfft3d/lib
    PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE
    GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)


# building core executables
ADD_EXECUTABLE(mat3d ${MAT3D_SRCS})
TARGET_LINK_LIBRARIES(mat3d MatFFT3D)

ADD_EXECUTABLE(mat2d ${MAT2D_SRCS})
TARGET_LINK_LIBRARIES(mat2d MatFFT3D)

ADD_EXECUTABLE(rec3d ${REC3D_SRCS})
TARGET_LINK_LIBRARIES(rec3d MatFFT3D)

ADD_EXECUTABLE(therm3d ${THERM3D_SRCS})
TARGET_LINK_LIBRARIES(therm3d MatFFT3D)

#ADD_EXECUTABLE(percolation ${PERCOLATION_SRCS})
#TARGET_LINK_LIBRARIES(percolation MatFFT3D)

#ADD_EXECUTABLE(omp ${OMP_SRCS})
#TARGET_LINK_LIBRARIES(omp MatFFT3D)

#ADD_EXECUTABLE(opt ${OPT_SRCS})
#ARGET_LINK_LIBRARIES(opt MatFFT3D)


#ADD_EXECUTABLE(json ${JSON_SRCS})
#TARGET_LINK_LIBRARIES(json MatFFT3D)

INSTALL(TARGETS mat3d mat2d rec3d therm3d RUNTIME DESTINATION Matfft3d/bin
        PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE
        GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)



# running tests
IF (ENABLE_TESTING)
   ADD_SUBDIRECTORY(testing)
ENDIF()

# packaging setting
INCLUDE(InstallRequiredSystemLibraries)
SET(CPACK_GENERATOR DEB)
SET(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)
#SET(CPACK_DEBIAN_PACKAGE_DEPENDS "libvtk7.1 (>= 6.2)")
SET(CPACK_PACKAGE_CONTACT "dehnavifn@gmail.com")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "MATFFT3D: A FFT plaftorm for efficient design of materials.")
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/README.md")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/Copyright.txt")
SET(CPACK_PACKAGE_VERSION_MAJOR ${MATFFT3D_MAJOR_VERSION})
SET(CPACK_PACKAGE_VERSION_MINOR ${MATFFT3D_MINOR_VERSION})
SET(CPACK_PACKAGE_VERSION_PATCH ${MATFFT3D_PATCH_VERSION})
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "MAT3D ${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}")
IF(WIN32 AND NOT UNIX)
    # There is a bug in NSI that does not handle full unix paths properly. Make
    # sure there is at least one set of four (4) backlasshes.
    SET(CPACK_PACKAGE_ICON "${CMake_SOURCE_DIR}/Utilities/Release\\\\InstallIcon.bmp")
    SET(CPACK_NSIS_INSTALLED_ICON_NAME "bin\\\\MyExecutable.exe")
    SET(CPACK_NSIS_DISPLAY_NAME "${CPACK_PACKAGE_INSTALL_DIRECTORY} My Famous Project")
    SET(CPACK_NSIS_HELP_LINK "http:\\\\\\\\www.my-project-home-page.org")
    SET(CPACK_NSIS_URL_INFO_ABOUT "http:\\\\\\\\www.my-personal-home-page.com")
    SET(CPACK_NSIS_CONTACT "me@my-personal-home-page.com")
    SET(CPACK_NSIS_MODIFY_PATH ON)
ENDIF(WIN32 AND NOT UNIX)
INCLUDE(CPack)
